local data = require "main.data"
local unit = require "game.unit.unit"

function init(self)
	self.move = vmath.vector3()
	self.state = data.STATE_NULL
	msg.post(".", "acquire_input_focus")
	if data.save.ai[1] then
		data.state = data.STATE_AI
	end
end

local function pauseinput(time)
	msg.post(".", "release_input_focus")
	timer.delay(time, false, function() msg.post(".", "acquire_input_focus") end)
end

local function quit2menu(self)
	msg.post("main:/sound", "stop_sound")
	msg.post("main:/handler", "show_menu")
end

local function panel()
	msg.post("view#game", "panel", {x = data.cursor.x, y = data.cursor.y})
end

local function move(self)
	data.cursor = data.cursor + self.move
	data.cursor.x = data.clamp(data.cursor.x, 1, data.MAP_SIZE)
	data.cursor.y = data.clamp(data.cursor.y, 1, data.MAP_SIZE)
	go.set_position(data.cursor * data.TILE_SIZE)
end

local function cursor(self)
	if data.state == self.state then
		return
	end
	self.state = data.state
	if data.state == data.STATE_PLAYING then
		sprite.play_flipbook("#sprite", "cursor")
	elseif data.state == data.STATE_FIRE then
		sprite.play_flipbook("#sprite", "cursor-fire")
	else
		sprite.play_flipbook("#sprite", "empty")
	end
end

function update(self, dt)
	if data.save.ai[unit.turn] then
		return
	end

	if data.state == data.STATE_PLAYING then
		move(self)
		if vmath.length(self.move) ~= 0 then
			panel()
		end
	elseif data.state == data.STATE_FIRE then
		move(self)
	elseif data.state == data.STATE_MAP then
		data.cursor.x = data.clamp(data.cursor.x, 8, data.MAP_SIZE - 7)
		data.cursor.y = data.clamp(data.cursor.y, 6, data.MAP_SIZE - 5)
		move(self)
	end
	cursor(self)
	self.move = vmath.vector3()
end

local function select()
	local unitdata = unit.findxy(data.cursor.x, data.cursor.y)
	if unitdata ~= nil then
		if unitdata.team == unit.turn then
			unit.obj = unitdata.obj
			unit.stat = unitdata
			msg.post(unitdata.obj, "select")
			data.state = data.STATE_UNIT
		end
	else
		msg.post("view#minimenu", "show", {menu = {"NEXT UNIT", "SCANNER", "END TURN"}})
	end
end

local function fire(self)
	msg.post(unit.obj, "fire")
end

local function input_cursor(self, action_id, action)
	if not action.pressed and not action.repeated then
		return
	end

	if action_id == hash("left") then
		self.move.x = -1
	elseif action_id == hash("right") then
		self.move.x = 1
	elseif action_id == hash("up") then
		self.move.y = 1
	elseif action_id == hash("down") then
		self.move.y = -1
	end
end

local function nextunit()
	repeat
		unit.next = unit.next + 1
		if unit.data[unit.next] == nil then
			unit.next = 1
		end
		local u = unit.data[unit.next]
	until u.team == unit.turn

	data.cursor = vmath.vector3(unit.data[unit.next].x, unit.data[unit.next].y, 0)
	data.sound("popup")
	panel()
end

local function input_playing(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		select()
	elseif action_id == hash("back") and action.pressed then
		nextunit()
	elseif action_id == hash("debug") and action.pressed and sys.get_engine_info().is_debug then
		msg.post("view#powerup", "show")
	end
end

local function input_map(self, action_id, action)
	if (action_id == hash("action") or action_id == hash("back")) and action.pressed then
		msg.post("view#map", "hide")
		data.sound("menu-back")
		data.state = data.STATE_PLAYING
	end
end

local function input_complete(self, action_id, action)
	if action_id == hash("action") and action.pressed then
		quit2menu(self)
	end
end

function on_input(self, action_id, action)
	if action.value < 0.5 then return
	end

	if data.state == data.STATE_COMPLETE then
		input_complete(self, action_id, action)
		return
	end

	if data.state == data.STATE_PAUSE then
		msg.post("view#pause", "input", {action_id = action_id, action = action})
	elseif action_id == hash("esc") and action.pressed then
		msg.post("view#pause", "show")
	end

	if data.save.ai[unit.turn] then
		return
	end

	if data.state == data.STATE_PLAYING  then
		input_cursor(self, action_id, action)
		input_playing(self, action_id, action)
	elseif data.state == data.STATE_UNIT then
		msg.post(unit.obj, "inputmove", {action_id = action_id, action = action})
	elseif data.state == data.STATE_FIRE then
		msg.post(unit.obj, "inputfire", {action_id = action_id, action = action})
	elseif data.state == data.STATE_MENU then
		msg.post("view#minimenu", "input", {action_id = action_id, action = action})
	elseif data.state == data.STATE_MAP then
		input_cursor(self, action_id, action)
		input_map(self, action_id, action)
	elseif data.state == data.STATE_POWERUP then
		msg.post("view#powerup", "input", {action_id = action_id, action = action})
	end
end

function on_message(self, message_id, message)
	if message_id == hash("nextunit") then
		nextunit()
	elseif message_id == hash("pauseinput") then
		pauseinput(message.time)
	elseif message_id == hash("quit") then
		quit2menu(self)
	end
end


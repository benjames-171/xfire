local data = require "main.data"
local unit = require "game.unit.unit"

local p = {
	0,0,0,0,50,
	0,0,0,1,39,
	0,0,1,0,28,
	0,0,1,1,27,
	0,1,0,0,37,
	0,1,0,1,38,
	0,1,1,0,25,
	0,1,1,1,26,
	1,0,0,0,40,
	1,0,0,1,39,
	1,0,1,0,28,
	1,0,1,1,27,
	1,1,0,0,37,
	1,1,0,1,38,
	1,1,1,0,25,
	1,1,1,1,26}

local function tile(x, y, offset)
		local n = tilemap.get_tile("#tilemap", "world", x, y+1)
		local e = tilemap.get_tile("#tilemap", "world", x+1, y)
		local s = tilemap.get_tile("#tilemap", "world", x, y-1)
		local w = tilemap.get_tile("#tilemap", "world", x-1, y)

		if data.walltile(n) then n = 1 else n = 0 end
		if data.walltile(e) then e = 1 else e = 0 end
		if data.walltile(s) then s = 1 else s = 0 end
		if data.walltile(w) then w = 1 else w = 0 end

		local c = 1
		while p[c] ~= n or p[c+1] ~= e or p[c+2] ~= s or p[c+3] ~= w do
			c = c + 5
		end

		local t = p[c+4]
		tilemap.set_tile("#tilemap", "world", x, y, t + offset)
	end

local function spawnunit(x, y, t)
	local team, type

	if t < 109 then
		team = 1
		type = 1 + ((t - 97) / 2)
	else
		team = 2
		type = 1 + ((t - 109) / 2)
	end

	local pos = data.tile2world(vmath.vector3(x, y, 0))
	local url = factory.create("#unit-fac", pos, nil, {team = team, type = type})
	unit.add(x, y, team, type, url)
end

local function parse()
	local sx, sy, w, h = tilemap.get_bounds("#tilemap")

	for y = sy, h + sy - 1 do
		for x = sx, w+sx-1 do
			local t = tilemap.get_tile("#tilemap", "world", x, y)
			if t >= 121 and t <= 129 then
				if math.random(1,4) == 1 then
					tilemap.set_tile("#tilemap", "world", x, y, math.random(t, t+3))
				else
					tilemap.set_tile("#tilemap", "world", x, y, 0)
				end
			elseif t == 11 then
				tilemap.set_tile("#tilemap", "world", x, y, 0)
				data.cursor = vmath.vector3(x, y, 0)
				msg.post("common/view", "snap_to")
			elseif t >= 13 and t <= 15 then
				tile(x, y, (t-13) * 4)
			elseif t >= 97 and t <= 120 then
				tilemap.set_tile("#tilemap", "world", x, y, 0)
				spawnunit(x, y, t)
			end
		end
	end
end

function init(self)
	unit.init()
	parse()
end

local data = require "main.data"

local function findpath(self)
	local map = {}
	local cost = {[1] = {1,1,1,1}}

	for y = 1, data.MAP_SIZE do
		for x = 1, data.MAP_SIZE do
			local t = tilemap.get_tile("level#tilemap", "world", x, y)
			local c = tilemap.get_tile("level#tilemap", "control", x, y)
			if data.walltile(t) or data.solidtile(c) then t = 0
			else t = 1
			end
			map[x + (y * data.MAP_SIZE)] = t
		end
	end

	astar.set_map(map)
	astar.set_costs(cost)

	local result, size, total_cost, path = astar.solve(6,6, 18,18)
	self.path = path

	if result == astar.SOLVED then
		print("SOLVED")
		for _, v in ipairs(path) do
			print("Tile: ", v.x .. "-" .. v.y)
			tilemap.set_tile("level#tilemap", "world", v.x, v.y, 0)
		end
	elseif result == astar.NO_SOLUTION then

	elseif result == astar.START_END_SAME then

	end
end

local ST_RESET = 0
local ST_MOVE = 1
local ST_FIRE = 2

function init(self)
	self.path = nil
	self.state = ST_RESET
end

local function think(self)
	if self.state == ST_RESET then
		--findpath(self)
		--self.state = ST_MOVE
		msg.post("common/turn", "nextunit")
		data.cursor = data.world2tile(go.get_position())
	elseif self.state == ST_MOVE then

	elseif self.state == ST_FIRE then

	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("think") then
		think(self)
	end
end


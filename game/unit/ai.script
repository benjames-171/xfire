local data = require "main.data"
local unit = require "game.unit.unit"

local ST_ERR = -1
local ST_RESET = 0
local ST_MOVE = 1
local ST_FIRE = 2
local ST_RETREAT = 3
local ST_REGEN = 4
local ST_END = 5

local function findpath(self, sx, sy, tx, ty)
	local map = {}
	local cost = {[1] = {1,1,1,1}}

	for y = 1, data.MAP_SIZE do
		for x = 1, data.MAP_SIZE do
			local t = tilemap.get_tile("level#tilemap", "world", x, y)
			local c = tilemap.get_tile("level#tilemap", "control", x, y)
			if data.walltile(t) or data.solidtile(c) or unit.findxy(x, y) then t = 0
			else t = 1
			end
			map[(x + 1) + (y  * data.MAP_SIZE)] = t
		end
	end

	astar.set_map(map)
	astar.set_costs(cost)

	local result, size, _, path = astar.solve(sx, sy, tx, ty)

	if result == astar.SOLVED then
		self.path = path
		self.plen = size
		self.step = 2
	else
		self.state = ST_ERR
	end
end

function init(self)
	self.path = nil
	self.enemy = {}
	self.plen = 0
	self.step = 0
	self.state = ST_RESET
	self.endpoint = vmath.vector3()
end

local function reset(self)
	self.step = 0
	repeat
		self.endpoint = data.wp[math.random(1, data.maxwp)]
		local len = vmath.length(self.endpoint - vmath.vector3(unit.stat.x, unit.stat.y, 0))
	until len > 16
	data.cursor = vmath.vector3(unit.stat.x, unit.stat.y, 0)
	msg.post("common/view#script", "snap_to")
	self.state = ST_MOVE
end

local function step(self)
	unit.stat.x = self.path[self.step].x
	unit.stat.y = self.path[self.step].y
	data.cursor = vmath.vector3(unit.stat.x, unit.stat.y, 0)
	go.animate(".", "position", go.PLAYBACK_ONCE_FORWARD, data.tile2world(vmath.vector3(data.cursor)), go.EASING_LINEAR, data.speed() / 2)
	unit.stat.move = unit.stat.move - 1
	self.step = self.step + 1
	data.sound("step")
end

local function move(self)
	if self.step == 0 then
		findpath(self, unit.stat.x, unit.stat.y, self.endpoint.x, self.endpoint.y)
		data.cursor = vmath.vector3(unit.stat.x, unit.stat.y, 0)
		msg.post("common/view#script", "snap_to")
	elseif unit.stat.move > 1 then
		step(self)
		if self.step > self.plen then
			self.state = ST_RESET
		else
			if unit.findtargets(self) > 0 then
				self.state = ST_FIRE
			elseif unit.stat.hp <= (unit.stat.hpmax - 2) and unit.stat.move >= 4 then
				self.state = ST_REGEN
			end
		end
	else
		self.state = ST_END
	end
end

local function retreat(self)
	self.step = self.step - 2
	if self.step > 0 and unit.stat.move > 0 then
		step(self)
	else
		self.state = ST_END
	end
end

local function regen(self)
	msg.post("#regen", "enable")
	unit.stat.hp = data.wrap(unit.stat.hp + 2, 1, unit.stat.hpmax)
	timer.delay(1.2, false, function () msg.post("#regen", "disable") end)
	unit.stat.move = unit.stat.move - 4
	self.state = ST_MOVE
end

local function fire(self)
	if unit.stat.fire > 0 then
		if unit.findtargets(self) > 0 then
			data.cursor = self.target[1]
			factory.create("#shot-fac", nil, nil, {target = self.target[1], power = unit.stat.power})
		else
			self.state = ST_MOVE
		end
	else
		if unit.findtargets(self) > 0 then
			self.state = ST_RETREAT
		else
			self.state = ST_MOVE
		end
	end
end

local function think(self)
	if self.state == ST_RESET then
		reset(self)
	elseif self.state == ST_MOVE then
		move(self)
	elseif self.state == ST_FIRE then
		fire(self)
	elseif self.state == ST_RETREAT then
		retreat(self)
	elseif self.state == ST_REGEN then
		regen(self)
	elseif self.state == ST_END then
		self.step = 0
		self.state = ST_MOVE
		msg.post("common/turn", "nextunit")
	elseif self.state == ST_ERR then
		msg.post("common/turn", "nextunit")
		self.step = 0
		self.state = ST_RESET
	end
	msg.post("common/view#game", "panel", {x = unit.stat.x, y = unit.stat.y})
end

function on_message(self, message_id, message)
	if message_id == hash("think") then
		think(self)
	end
end

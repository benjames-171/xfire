local data = require "main.data"
local unit = require "game.unit.unit"

go.property("team", 1)
go.property("type", 1)

function init(self)
	local anim = self.team.."-"..self.type
	sprite.play_flipbook("#sprite", anim)
	sprite.set_hflip("#sprite", self.team == 2)
	self.move = vmath.vector3()
	self.flash = 0
	self.obj = nil
	unit.stat = nil
	self.target = {}
end

local function move(self)
	local pos = vmath.vector3(unit.stat.x + self.move.x, unit.stat.y + self.move.y, 0)
	local t = tilemap.get_tile("level#tilemap", "world", pos.x, pos.y)
	local c = tilemap.get_tile("level#tilemap", "control", pos.x, pos.y)
	if not data.walltile(t) and not data.solidtile(c) and unit.findxy(pos.x, pos.y) == nil then
		unit.stat.move = unit.stat.move - 1
		unit.stat.x = pos.x
		unit.stat.y = pos.y
		go.set_position(data.tile2world(pos))
		data.cursor = pos
		msg.post("common/view#game", "panel", {x = data.cursor.x, y = data.cursor.y})
		data.sound("step")
		return true
	end
	return false
end

local function powerup(self)
	local t = tilemap.get_tile("level#tilemap", "control", data.cursor.x, data.cursor.y)
	if t == 192 then
		tilemap.set_tile("level#tilemap", "control", data.cursor.x, data.cursor.y, 0)
		data.sound("popup")
		msg.post("common/view#powerup", "show")
	end
end

local function findtargets(self)
	local pos = go.get_position() + vmath.vector3(-8, -8, 0)
	self.target = {}
	local total = 0
	for _, v in pairs(unit.data) do
		if unit.stat.team ~= v.team then
			local target = data.tile2world(vmath.vector3(v.x, v.y, 0)) + vmath.vector3(-8, -8, 0)
			local ray = physics.raycast(pos, target, {hash("world")})
			if ray == nil then
				table.insert(self.target, vmath.vector3(v.x, v.y, 0))
				total = total + 1
			end
		end
	end
	if total > 0 then
		local text = string.format("ENEMY SPOTTED [%d]", total)
		msg.post("common/view#game", "tick", {text = text, color = "#ff032b"})
		data.sound("alarm")
	else
		msg.post("common/view#game", "cleartick")
	end
	return total
end

local function flash(self, dt)
	self.flash = self.flash + dt
	self.flash = data.wrap(self.flash, 0, 0.4)
	if self.flash > 0.1 then
		msg.post("#sprite", "enable")
	else
		msg.post("#sprite", "disable")
	end
end

function update(self, dt)
	if self.obj == unit.obj and self.obj ~= nil then
		if vmath.length(self.move) ~= 0 and data.state == data.STATE_UNIT and unit.stat.move > 0 then
			if move(self) then
				local total = findtargets(self)
				powerup(self)
			end
		end
		flash(self, dt)
		self.move = vmath.vector3()
	end
end

local function fire(self)
	local target = vmath.vector3(data.cursor)
	factory.create("#shot-fac", nil, nil, {target = target, power = unit.stat.power})
end

local function cancel(self)
	unit.obj = nil
	self.obj = nil
	data.sound("menu-back")
	msg.post("#sprite", "enable")
	msg.post("common/view#game", "cleartick")
	data.state = data.STATE_PLAYING
end

local function menu(self)
	local menudata = {}

	if unit.stat.fire > 0 then
		table.insert(menudata, "FIRE")
	end
	if unit.stat.move >= 4 and unit.stat.hp < unit.stat.hpmax then
		table.insert(menudata, "REGENERATE")
	end
	table.insert(menudata, "CANCEL")
	msg.post("common/view#minimenu", "show", {menu = menudata, caller = self.obj})
end

local function input(self, action_id, action)
	if action_id == hash("up") and action.pressed then
		self.move.y = 1
	elseif action_id == hash("down") and action.pressed then
		self.move.y = -1
	elseif action_id == hash("left") and action.pressed then
		self.move.x = -1
	elseif action_id == hash("right") and action.pressed then
		self.move.x = 1
	elseif action_id == hash("action") and action.pressed then
		menu(self)
	elseif action_id == hash("back") and action.pressed then
		cancel(self)
	end
end

function on_message(self, message_id, message, sender)
	if message_id == hash("input") then
		input(self, message.action_id, message.action)
	elseif message_id == hash("select") then
		self.obj = unit.obj
		data.sound("popup")
		findtargets(self)
	elseif message_id == hash("fire") then
		fire(self)
	elseif message_id == hash("lookat") then
		data.cursor = vmath.vector3(unit.stat.x, unit.stat.y, 0)
	elseif message_id == hash("regenerate") then
		if unit.stat.move >= 4 and unit.stat.hp < unit.stat.hpmax then
			unit.stat.move = unit.stat.move - 4
			unit.stat.hp = unit.stat.hp + 1
			msg.post("common/view#game", "panel", {x = data.cursor.x, y = data.cursor.y})
			data.sound("powerup")
		end
	elseif message_id == hash("cancel") then
		cancel(self)
	end
end